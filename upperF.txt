### SOLID

- SINGLE RESPONSIBILITY: A METHOD/FUNCTION SHOULD ONLY HAVE ONE RESPONSIBILITY
- OPEN CLOSE: OPEN TO EXTENSTION BUT CLOSE FOR MODIFICATIONS
- LISKOV SUBSTITUTION: OBJECTS OF A SUPERCLASS SHOULD BE REPLACEABLE WITH OBJECTS OF THEIR SUBCLASSES WITHOUT BREAKING THE APPLICATION OR CHANGING THE EXPECTED BEHAVIOR OF THE PROGRAM
- INTERFACE SEGREGATION: CLIENTS SHOULD NOT BE FORCED TO DEPEND ON METHODS THEY DO NOT USE
- DEPENDENCY INVERSION: CLIENT DEPENDS ON THE ABSTRACTION RATHER THAN CONCRETE CLASSES

### UML RELATIONSHIP SUMMARY

- ASSOCIATION
- AGGREGATION (IT'S ALSO CALLED A "HAS-A" RELATIONSHIP)
- COMPOSITION
- MULTIPLICITY
- DEPENDENCY

![ALT TEXT](ASSETS/IMAGE-1.PNG)

#### COMPOSITION VS. AGGREGATION

- AGGREGATION: A KIND OF ASSOCIATION THAT LOOSELY SUGGESTS WHOLE-PART RELATIONSHIPS

- COMPOSITION: A STRONG KIND OF WHOLE-PART AGGREGATION

  A COMPOSITION RELATIONSHIP IMPLIES:

  - AN INSTANCE OF THE PART BELONGS TO ONLY ONE COMPOSITE INSTANCE AT A TIME
  - THE PART MUST ALWAYS BELONG TO A COMPOSITE
  - THE COMPOSITE IS RESPONSIBLE FOR THE CREATION AND DELETION OF PARTS

  IF THE COMPOSITE IS DESTROYED, ITS PARTS MUST EITHER BE DESTROYED, OR ATTACHED TO ANOTHER COMPOSITE
  ![ALT TEXT](ASSETS/IMAGE.PNG)

#### DEPENDENCY

USE FOR DEPICTING GLOBAL, PARAMETER VARIABLE, LOCAL VARIABLE, AND STATIC-METHOD DEPENDENCY BETWEEN OBJECTS

TO SHOW THE TYPE OF DEPENDENCY, A LABEL CAN BE USED

![ALT TEXT](ASSETS/IMAGE-2.PNG)

CARFACTORY DEPENDS ON THE CAR CLASS. CAR CLASS COULD BE DEFINED WITHOUT THE KNOWLEDGE OF CARFACTORY CLASS, BUT CARFACTORY REQUIRES CAR FOR ITS DEFINITION BECAUSE IT PRODUCES CARS

ANOTHER EXAMPLE:

![ALT TEXT](ASSETS/IMAGE-3.PNG)

### DESIGN PATTERN

- STRUCTURAL PATTERN

  - <B>ADAPTOR</B>: MAKING INCOMPATIBLE CLASSES WORK TOGETHER
    - AKA WRAPPER
    - IN C++, STD METHOD USE ADAPTOR FREQUENTLY
  - BRIDGE
  - <B>COMPOSITE</B>
  - <B>DECORATOR</B>
  - FAÃ§ADE
  - FLYWEIGHT
  - PROXY

- CREATIONAL PATTERN
- BEHAVIORAL PATTERN

### 0910 COMPOSITE PATTERN

- DECORATOR HAS DECORATOR. THE DECORATOR AT RUNTIME IS A LINKED LIST (OMG)

```
// COMPOSITION
T = NEW SCROLLBAR(T)
T = NEW BORDER(T)

// KEEP ADDING FEATURES....
```

- ADDING BEHAVIORS IN RUNTIME
- DECORATION IN ACTION: ( A ) -> ( B ) -> ( C ): EXECUTE C FIRST, AND THEN B, AND THEN A
- FLEXIBLE ALTERNATIVE TO INHERITANCE:

  - ADDING/REMOVING RESPONSIBILITY AT RUNTIME
  - MIX AND MATCH RESPONSIBILITY
  - DECORATORS ARE SIMPLE AND STACKABLE

- CAN MIX COMPOSITE WITH DECORATORS (UGLY)
- ADAPTOR VS. DECORATOR
  - ADAPTOR IS ALTERING EXISTING FUNCTIONALITIES
  - DECORATOR IS ADDING NEW FUNCTIONALITIES

### 0915 PROXY PATTERN

PROVIDE A <B> PLACEHOLDER </B> FOR ANOTHER OBJECT TO <B> CONTROL ACCESS </B> TO IT

A PROXY OBJECT CONTROLS ACCESS TO ANOTHER OBJECT, WHICH MAY BE:

- REMOTE
- EXPENSIVE TO CREATE
- IN NEED OF PROTECTION, REQUIRE PERMSSION
  - FOR EXAMPLE, WHEN IMPLEMENTNG RBA IS AN OVERKILL, USE A SECURITY PROXY TO REQUIRE PERMSSION
- OR NEED A SMART REFERENE DOING MORE THAN A SIMPLE POINTER

- VIRTUAL PROXY
  SOMETIMES CREATING AN OBJECT OR CALLING A CLASS IS TOO EXPENSIVE
  IN JAVA, LAZY INITIALIZATION (SET IT TO NULL AND DEFINE IT LATER) OR CREATE AN EMPTY OBJECT AND DO DEPENDENCY INJECTION TO IT LATE (?)

- PROTECTION PROXY
  OVERLOADING THE MEMBER ACCESSS IN C++. THE PROXY BEHAVES JUST LIKE A POINTER.
  - SMART POINTER IN C++ (ACTS LIKE PROXY)
  - IN C ++, IF YOU DELETE A REFERENCE BUT DON'T DELETE IT IN A HEAP (STACK), THERE WILL BE MEMORY LEAK
  - JAVA HAS GARBAGE COLLECTION SO YOU DON'T HAVE TO WORRY ABOUT THAT
  - DANGLING POINTER (?

THE ABOVE IS MORE ABOUT THE IMPLEMENTATION DETAILS. THE KEY TAKEAWAY IS THAT POINTER IS IMPLEMENTING PROXY DESIGN PATTERN

- COPY ON WRITE
  COPY-ON-WRITE (COW) IS A RESOURCE MANAGEMENT TECHNIQUE WHERE A SHARED DATA COPY IS ONLY DUPLICATED WHEN A PROCESS OR SYSTEM ATTEMPTS TO MODIFY IT, RATHER THAN IMMEDIATELY DUPLICATING ALL DATA

- RELATED PATTERNS
  - ADAPTOR (PROXY DOESN'T TRANSLATE INTERFACE; IT DELEGATES THE JOB)
  - DECORATOR
